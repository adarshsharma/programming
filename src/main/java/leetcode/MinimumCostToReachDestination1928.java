package leetcode;

import java.util.HashMap;
import java.util.Map;

public class MinimumCostToReachDestination1928 {

    Map<Integer, Map<Integer, Integer>> dp;
    int n;
    Map<Integer, Map<Integer, Integer>> eMap;
    int[] passingFees;

    public int minCost(int maxTime, int[][] edges, int[] passingFees) {
        n = passingFees.length;
        this.passingFees = passingFees;
        eMap = new HashMap<>();
        for (int[] edge : edges) {
            eMap.computeIfAbsent(edge[0], k -> new HashMap<>())
                .merge(edge[1], edge[2], Integer::min);
            eMap.computeIfAbsent(edge[1], k -> new HashMap<>())
                .merge(edge[0], edge[2], Integer::min);
        }
        dp = new HashMap<>();
        int cost = cost(n - 1, maxTime);
        return cost == Integer.MAX_VALUE ? -1 : cost;
    }

    private int cost(int node, int mt) {
        if (node == 0) {
            return passingFees[0];
        }
        Map<Integer, Integer> vMap = dp.computeIfAbsent(node, k -> new HashMap<>());
        if (vMap.containsKey(mt)) {
            return vMap.get(mt);
        }

        int min = Integer.MAX_VALUE;

        Map<Integer, Integer> adj = eMap.get(node);
        for (int neigh : adj.keySet()) {
            if (adj.get(neigh) <= mt) {
                min = Math.min(min, cost(neigh, mt - adj.get(neigh)));
            }
        }

        if (min == Integer.MAX_VALUE) {
            vMap.put(mt, Integer.MAX_VALUE);
        } else {
            vMap.put(mt, min + passingFees[node]);
        }
        return vMap.get(mt);
    }


    public static void main(String[] args) {
        // int maxTime = 29;
        // int[][] edges = {{0, 1, 10}, {1, 2, 10}, {2, 5, 10}, {0, 3, 1}, {3, 4, 10}, {4, 5, 15}};
        // int[] passingFees = {5, 1, 2, 20, 20, 3};
        // int maxTime = 25;
        // int[][] edges = {{0, 1, 10}, {1, 2, 10}, {2, 5, 10}, {0, 3, 1}, {3, 4, 10}, {4, 5, 15}};
        // int[] passingFees = {5, 1, 2, 20, 20, 3};
        int maxTime = 500;
        int[][] edges = {{14, 7, 25}, {37, 33, 28}, {34, 0, 17}, {36, 31, 39}, {5, 2, 43},
            {22, 1, 40}, {48, 19, 28}, {17, 14, 25}, {12, 11, 46}, {3, 8, 49}, {5, 16, 35},
            {36, 7, 2}, {44, 31, 24}, {23, 6, 45}, {20, 13, 2}, {18, 15, 45}, {29, 22, 26},
            {31, 49, 32}, {12, 25, 46}, {44, 16, 14}, {15, 43, 35}, {41, 19, 26}, {35, 47, 37},
            {2, 1, 18}, {26, 9, 13}, {14, 40, 46}, {46, 14, 2}, {11, 1, 25}, {36, 41, 29},
            {7, 5, 39}, {28, 42, 12}, {8, 41, 49}, {47, 27, 28}, {8, 31, 9}, {2, 45, 9},
            {31, 32, 48}, {13, 41, 14}, {46, 6, 9}, {11, 0, 4}, {24, 30, 6}, {46, 19, 36},
            {9, 30, 23}, {36, 25, 38}, {44, 2, 15}, {16, 21, 6}, {5, 16, 6}, {6, 29, 32},
            {4, 47, 44}, {30, 35, 37}, {2, 32, 32}, {28, 30, 42}, {43, 35, 24}, {46, 5, 42},
            {15, 23, 49}, {15, 8, 35}, {6, 45, 39}, {38, 41, 3}, {30, 28, 29}, {44, 32, 19},
            {29, 2, 13}, {32, 8, 24}, {29, 14, 8}, {35, 27, 47}, {32, 21, 20}, {5, 16, 5},
            {20, 13, 50}, {40, 27, 31}, {48, 45, 7}, {32, 4, 33}, {17, 8, 27}, {20, 2, 2},
            {35, 16, 46}, {32, 0, 43}, {49, 19, 6}, {1, 35, 50}, {32, 43, 24}, {25, 7, 19},
            {7, 9, 38}, {43, 30, 33}, {12, 18, 21}, {37, 44, 16}, {49, 39, 13}, {4, 19, 40},
            {46, 33, 48}, {20, 42, 15}, {6, 0, 37}, {41, 30, 3}, {44, 6, 32}, {23, 45, 41},
            {20, 30, 48}, {22, 0, 21}, {49, 12, 13}, {2, 13, 8}, {21, 17, 11}, {23, 34, 25},
            {38, 36, 5}, {26, 45, 6}, {48, 20, 11}, {28, 12, 44}, {36, 16, 3}, {10, 40, 33},
            {16, 29, 28}, {13, 32, 35}, {43, 41, 12}, {41, 29, 7}, {12, 6, 16}, {8, 31, 45},
            {0, 14, 23}, {6, 3, 33}, {36, 22, 43}, {35, 20, 35}, {6, 2, 15}, {48, 12, 14},
            {44, 5, 2}, {42, 35, 37}, {15, 4, 49}, {45, 40, 31}, {22, 12, 17}, {31, 10, 45},
            {17, 13, 22}, {40, 13, 38}, {18, 38, 45}, {27, 28, 48}, {19, 34, 43}, {40, 25, 5},
            {28, 23, 33}, {13, 28, 27}, {13, 40, 14}, {16, 26, 30}, {3, 4, 37}, {39, 2, 3},
            {0, 26, 20}, {43, 35, 44}, {30, 17, 41}, {41, 37, 48}, {15, 41, 29}, {27, 18, 21},
            {32, 35, 7}, {15, 27, 15}, {34, 1, 35}, {3, 10, 11}, {32, 11, 34}, {11, 44, 36},
            {30, 11, 6}, {16, 9, 8}, {32, 25, 31}, {3, 23, 46}, {22, 21, 47}, {17, 12, 7},
            {11, 3, 27}, {40, 34, 34}, {47, 4, 35}, {37, 23, 17}, {39, 26, 17}, {49, 21, 4},
            {38, 45, 28}, {23, 14, 32}, {19, 28, 27}, {13, 20, 49}, {4, 9, 31}, {23, 12, 7},
            {47, 14, 11}, {3, 25, 17}, {19, 2, 37}, {12, 23, 47}, {46, 17, 31}, {27, 28, 26},
            {23, 10, 25}, {30, 34, 6}, {3, 8, 26}, {30, 49, 3}, {41, 28, 19}, {8, 5, 44},
            {31, 29, 16}, {3, 9, 26}, {6, 15, 3}, {4, 1, 6}, {44, 13, 29}, {19, 3, 27}, {19, 6, 15},
            {39, 17, 40}, {18, 32, 35}, {12, 40, 39}, {33, 5, 45}, {14, 40, 6}, {47, 31, 35},
            {16, 33, 21}, {40, 39, 36}, {43, 15, 41}, {36, 24, 24}, {44, 32, 27}, {42, 19, 9},
            {21, 7, 18}, {14, 9, 46}, {11, 5, 10}, {17, 18, 49}, {11, 13, 23}, {47, 8, 4},
            {37, 1, 9}, {45, 48, 49}, {32, 20, 44}, {45, 5, 16}, {24, 28, 35}, {47, 40, 1},
            {9, 2, 23}, {24, 7, 1}, {36, 24, 29}, {25, 32, 25}, {26, 5, 11}, {18, 43, 31},
            {13, 11, 23}, {39, 2, 39}, {41, 32, 10}, {25, 2, 48}, {48, 17, 37}, {11, 42, 44},
            {49, 45, 49}, {24, 44, 23}, {23, 15, 7}, {0, 27, 22}, {16, 20, 34}, {3, 17, 10},
            {5, 2, 28}, {34, 12, 13}, {4, 1, 7}, {41, 40, 10}, {38, 0, 14}, {1, 0, 11},
            {21, 20, 39}, {32, 30, 40}, {32, 40, 8}, {18, 46, 37}, {49, 7, 15}, {31, 27, 47},
            {35, 1, 36}, {18, 15, 32}, {4, 21, 14}, {30, 37, 15}, {14, 15, 42}, {23, 5, 34},
            {33, 34, 50}, {2, 17, 32}, {7, 2, 26}, {39, 19, 5}, {1, 8, 24}, {49, 48, 10},
            {15, 12, 25}, {2, 31, 37}, {10, 9, 37}, {18, 1, 47}, {44, 21, 14}, {13, 35, 40},
            {29, 24, 9}, {24, 40, 33}, {44, 47, 1}, {21, 6, 31}, {16, 7, 39}, {37, 40, 35},
            {24, 29, 47}, {3, 2, 21}, {29, 32, 35}, {30, 15, 28}, {47, 43, 40}, {43, 20, 34},
            {32, 40, 50}, {26, 28, 1}, {18, 33, 20}, {40, 32, 12}, {26, 27, 1}, {13, 33, 32},
            {38, 8, 21}, {11, 23, 49}, {12, 19, 1}, {26, 31, 5}, {6, 43, 9}, {4, 32, 29},
            {6, 10, 18}, {14, 33, 42}, {9, 24, 27}, {5, 11, 16}, {13, 22, 31}, {21, 5, 38},
            {14, 29, 49}, {24, 25, 33}, {38, 23, 43}, {34, 0, 44}, {27, 7, 2}, {27, 2, 35},
            {27, 26, 40}, {9, 6, 35}, {37, 27, 45}, {27, 16, 22}, {47, 26, 18}, {38, 30, 35},
            {30, 3, 24}, {29, 44, 41}, {7, 46, 23}, {40, 10, 22}, {15, 45, 13}, {10, 40, 43},
            {40, 49, 41}};
        int[] passingFees = {
            700, 69, 406, 834, 260, 32, 901, 113, 982, 53, 70, 758, 976, 614, 661, 894, 508, 175,
            388, 374, 423, 721, 528, 524, 984, 319, 105, 598, 517, 587, 265, 945, 973, 263, 458,
            374, 335, 577, 826, 413, 927, 353, 987, 560, 183, 161, 41, 712, 633, 385};

        System.out
            .println(new MinimumCostToReachDestination1928().minCost(maxTime, edges, passingFees));

    }
}
